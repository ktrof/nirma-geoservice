/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.nirma.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.nirma.model.FeatureCollection;
import org.nirma.model.GeometryCollection;
import org.nirma.model.InlineResponse400;
import org.nirma.model.InlineResponse401;
import org.nirma.model.InlineResponse403;
import org.nirma.model.InlineResponse500;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-04-09T07:56:43.078Z[GMT]")
@Validated
public interface GeometryApi {

    @Operation(summary = "Get an array of GeoJSON Geometry objects", description = "", security = {
        @SecurityRequirement(name = "UserSecurity")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful response", content = @Content(array = @ArraySchema(schema = @Schema(implementation = FeatureCollection.class)))),
        
        @ApiResponse(responseCode = "400", description = "The JSON is not valid.", content = @Content(schema = @Schema(implementation = InlineResponse400.class))),
        
        @ApiResponse(responseCode = "401", description = "The request requires an user authentication.", content = @Content(schema = @Schema(implementation = InlineResponse401.class))),
        
        @ApiResponse(responseCode = "500", description = "An unexpected error occured.", content = @Content(schema = @Schema(implementation = InlineResponse500.class))) })
    @RequestMapping(value = "/features",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<FeatureCollection> featureCollectionGetByTopic(@RequestParam String topic);


    @Operation(summary = "Create new GeoJSON FeatureCollection object", description = "", security = {
        @SecurityRequirement(name = "UserSecurity")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "New GeoJSON FeatureCollection object created"),
        
        @ApiResponse(responseCode = "400", description = "The JSON is not valid.", content = @Content(schema = @Schema(implementation = InlineResponse400.class))),
        
        @ApiResponse(responseCode = "401", description = "The request requires an user authentication.", content = @Content(schema = @Schema(implementation = InlineResponse401.class))),
        
        @ApiResponse(responseCode = "403", description = "The access is not allowed.", content = @Content(schema = @Schema(implementation = InlineResponse403.class))),
        
        @ApiResponse(responseCode = "500", description = "An unexpected error occured.", content = @Content(schema = @Schema(implementation = InlineResponse500.class))) })
    @RequestMapping(value = "/features",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> featureCollectionPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody FeatureCollection body);

}

